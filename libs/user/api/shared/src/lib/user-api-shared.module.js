"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApiSharedModule = void 0;
var common_1 = require("@nestjs/common");
var core_1 = require("@nestjs/core");
var jwt_1 = require("@nestjs/jwt");
var passport_1 = require("@nestjs/passport");
var typeorm_1 = require("@nestjs/typeorm");
var config_1 = require("@realworld/shared/api/config");
var follow_entity_1 = require("./follow.entity");
var follow_service_1 = require("./follow.service");
var jwt_auth_guard_1 = require("./jwt-strategy/jwt-auth.guard");
var jwt_strategy_1 = require("./jwt-strategy/jwt.strategy");
var roles_guard_1 = require("./roles.guard");
var user_entity_1 = require("./user.entity");
var user_service_1 = require("./user.service");
var UserApiSharedModule = /** @class */ (function () {
    function UserApiSharedModule() {
    }
    UserApiSharedModule = __decorate([
        common_1.Module({
            // This module uses the forFeature() method to define which repositories are registered in the current scope. With that in place, we can inject the UsersRepository into the UsersService
            // If you want to use the repository outside of the module which imports TypeOrmModule.forFeature, you'll need to re-export the providers generated by it. You can do this by exporting the whole module.
            imports: [
                typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, follow_entity_1.Follow]),
                passport_1.PassportModule.register({ defaultStrategy: 'jwt' }),
                jwt_1.JwtModule.registerAsync({
                    useFactory: function (config) {
                        return {
                            secret: config.configs.jwtSecret,
                            signOptions: { expiresIn: config.configs.jwtExpiresIn || '1d' }
                        };
                    },
                    inject: [config_1.ApiConfigService]
                })
            ],
            providers: [
                user_service_1.UserService,
                follow_service_1.FollowService,
                jwt_strategy_1.JwtStrategy,
                {
                    provide: core_1.APP_GUARD,
                    useClass: jwt_auth_guard_1.JwtAuthGuard,
                },
                {
                    provide: core_1.APP_GUARD,
                    useClass: roles_guard_1.RolesGuard,
                },
            ],
            exports: [user_service_1.UserService, follow_service_1.FollowService, jwt_strategy_1.JwtStrategy]
        })
    ], UserApiSharedModule);
    return UserApiSharedModule;
}());
exports.UserApiSharedModule = UserApiSharedModule;
